plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.8.1'
}

repositories {
    mavenCentral()
}

def allureVersion = "2.14.0",
    selenideVersion = "7.4.3",
    junitVersion = "5.7.2",
    aspectjweaverVersion = "1.9.22.1",
    ownerVersion = "1.0.12",
    assertjVersion = "3.19.0",
    slf4jVersion = "1.7.29"

allure {
    version = allureVersion
    autoconfigure = true
    aspectjweaver = true
    configuration = "testImplementation"
    useJUnit5 {
        version = allureVersion
    }
}

dependencies {
    testImplementation(
            "org.aspectj:aspectjweaver:$aspectjweaverVersion",
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "org.aeonbits.owner:owner:$ownerVersion",
            "org.assertj:assertj-core:$assertjVersion",
            "org.junit.jupiter:junit-jupiter-api:$junitVersion")
    testRuntimeOnly(
            "org.slf4j:slf4j-simple:$slf4jVersion",
            "org.junit.jupiter:junit-jupiter-engine:$junitVersion")
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

tasks.withType(Test).configureEach {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

def registerTestTask(String name, String tag) {
    tasks.register(name, Test) {
        useJUnitPlatform {
            includeTags tag
        }
        testLogging.showStandardStreams = true
    }
}

registerTestTask('testCheckout', 'checkout')
registerTestTask('testRegress', 'regress')
registerTestTask('testSmoke', 'smoke')
registerTestTask('testGoods', 'goods')
registerTestTask('testAuth', 'auth')
registerTestTask('testProducts', 'products')